import 'package:blur/blur.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:intl/intl.dart';

import '../Models/weather.dart';
import '../bloc/weatherBloc.dart';
import '../states/weatherState.dart';
import 'convert_Id_weather.dart';
import 'icon_Weather.dart';

import 'package:flutter_gen/gen_l10n/app_localizations.dart';

class BodyWeather extends StatelessWidget {
  const BodyWeather({Key? key}) : super(key: key);

  @override
  Widget build(BuildContext context) {
    // TODO: implement build
    // throw UnimplementedError();
    WeatherMain weather;
    DateTime now = DateTime.now();
    return SafeArea(
      child: SizedBox(
          height: double.infinity,
          width: double.infinity,
          child: Center(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.center,
              mainAxisSize: MainAxisSize.max,
              mainAxisAlignment: MainAxisAlignment.end,
              children: <Widget>[
                const Padding(padding: EdgeInsets.only(top: 10)),

                Expanded(
                    flex: 1,
                    child: SizedBox(
                        // height: 100,
                        child: BlocBuilder<WeatherBloc, WeatherState>(
                            builder: (context, stateWeather) {
                      if (stateWeather is WeatherStateLoading) {
                        // print("lay dl tt_loadding");
                        return const Center(
                          child: CircularProgressIndicator(),
                        );
                      }
                      if (stateWeather is WeatherStateSuccess) {
                        weather = stateWeather.autogeneratedWeather;
                        return Row(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Text(
                              '${weather.current!.weather![0].description}  '
                                  .toUpperCase(),
                              style: TextStyle(
                                  fontSize: 20,
                                  fontFamily: 'ChakraPetch',
                                  // fontWeight: FontWeight.w100,
                                  color: (convertIdWeather(weather.current!.weather![0].id!.toInt()) == 800
                                      || convertIdWeather(weather.current!.weather![0].id!.toInt()) == 801)
                                      ? (now.hour < 18 && now.hour > 5) ? Colors.black54 : Colors.white70
                                      : Colors.white70),

                            ),
                            Container(
                                decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(10),
                                    color: (convertIdWeather(weather.current!.weather![0].id!.toInt()) ==
                                        800 || convertIdWeather(weather.current!.weather![0].id!.toInt()) == 801)
                                        ? (now.hour < 18 && now.hour > 5) ? Colors.black54 : Colors.white70
                                        : Colors.white10),
                                padding: EdgeInsets.all(3),
                                child: Text(
                                  ' ${weather.current!.temp!.toInt()} Â°C '
                                      .toUpperCase(),
                                  style: const TextStyle(
                                    fontSize: 20,
                                    fontFamily: 'ChakraPetch',
                                    // fontWeight: FontWeight.w100,
                                    color: Colors.white70,
                                  ),
                                )),
                          ],
                        );
                      } else {
                        // print("lay dl tt_erro");
                        return Text(
                          AppLocalizations.of(context)!.loadHead,
                          style: const TextStyle(
                              fontSize: 20,
                              fontWeight: FontWeight.w400,
                              color: Colors.white70),
                        );
                      }
                    }))),

                const IconWeather(),
                // const Padding(padding: EdgeInsets.only(top: 100)),
                // Expanded(
                //   flex: 12,
                //   child: SizedBox(
                //     width: 100,
                //     height: 100,
                //     child: Lottie.network(
                //         "https://assets2.lottiefiles.com/temp/lf20_VAmWRg.json"),
                //   ),
                // ),
                Expanded(
                  flex: 2,
                  child: Align(
                      alignment: FractionalOffset.bottomCenter,
                      child: BlocBuilder<WeatherBloc, WeatherState>(
                          builder: (context, stateWeather) {
                        if (stateWeather is WeatherStateSuccess) {
                          weather = stateWeather.autogeneratedWeather;
                          return Column(
                            children: [
                              Container(
                                decoration: BoxDecoration(
                                    borderRadius: BorderRadius.circular(10),
                                    color: (convertIdWeather(weather.current!.weather![0].id!.toInt()) ==
                                        800 || convertIdWeather(weather.current!.weather![0].id!.toInt()) == 801)
                                        ? (now.hour < 18 && now.hour > 5) ? Colors.black54 : Colors.white10
                                        : Colors.white10),
                                padding: EdgeInsets.all(10),
                                width: 170,
                                height: 70,
                              ).blurred(
                                  colorOpacity: 0.2,
                                  borderRadius: BorderRadius.circular(10),
                                  // const BorderRadius.horizontal(
                                  //     left: Radius.circular(20),),
                                  blur: 3.5,
                                  overlay: Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Text(
                                        DateFormat('hh:mm a').format(now),
                                        style: const TextStyle(
                                            fontSize: 30,
                                            fontWeight: FontWeight.w500,
                                            color: Colors.white70),
                                      ),
                                      Text(
                                        DateFormat.MMMMEEEEd().format(now),
                                        style: const TextStyle(
                                            fontSize: 16,
                                            fontWeight: FontWeight.w400,
                                            color: Colors.white70),
                                      ),
                                    ],
                                  ))
                            ],
                          );
                        } else {
                          return Column(
                            children: [
                              Container(
                                decoration: BoxDecoration(
                                  borderRadius: BorderRadius.circular(10),
                                  color: Colors.white10,
                                ),
                                padding: EdgeInsets.all(10),
                                width: 170,
                                height: 70,
                              ).blurred(
                                  colorOpacity: 0.2,
                                  borderRadius: BorderRadius.circular(10),
                                  // const BorderRadius.horizontal(
                                  //     left: Radius.circular(20),),
                                  blur: 3.5,
                                  overlay: Column(
                                    children: [
                                      Text(
                                        DateFormat('hh:mm a').format(now),
                                        style: const TextStyle(
                                            fontSize: 30,
                                            fontWeight: FontWeight.w500,
                                            color: Colors.white70),
                                      ),
                                      Text(
                                        DateFormat.MMMMEEEEd().format(now),
                                        style: const TextStyle(
                                            fontSize: 16,
                                            fontWeight: FontWeight.w400,
                                            color: Colors.white70),
                                      ),
                                    ],
                                  ))
                            ],
                          );
                        }
                      })),
                )
                // const Padding(padding: EdgeInsets.only(top: 200)),
              ],
            ),
          )),
    );
  }
}
