import 'dart:math';

import 'package:audioplayers/audioplayers.dart';
import 'package:flutter/material.dart';
import 'package:flutter_bloc/flutter_bloc.dart';
import 'package:lottie/lottie.dart';

import '../Models/weather.dart';
import '../bloc/weatherBloc.dart';
import '../data/audio_data_url.dart';
import '../states/weatherState.dart';
import 'convert_Id_weather.dart';

class AudioPage extends StatefulWidget {
  const AudioPage({Key? key}) : super(key: key);

  @override
  State<StatefulWidget> createState() {
    // TODO: implement createState
    // throw UnimplementedError();
    return _MyAudioPage();
  }
}

class _MyAudioPage extends State<AudioPage> {
  AudioPlayer audioPlayer = AudioPlayer();
  int stateplay = 1;
  late WeatherMain weather;
  bool animation = false;
  DateTime now = DateTime.now();
  String urlmp3 =
      'https://file-examples.com/storage/feb8f98f1d627c0dc94b8cf/2017/11/file_example_MP3_700KB.mp3';

  // Future<void> audioOnInit() async {
  //   const kUrl1 = 'https://luan.xyz/files/audio/ambient_c_motion.mp3';
  //   //final Uri url = Uri.parse(uri);
  //   await audioPlayer.play(kUrl1);
  //   print('Audio Start On Init OK');
  // }

  @override
  void initState() {
    // TODO: implement initState
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    // TODO: implement build
    // throw UnimplementedError();
    return InkWell(onTap: () {
      if (stateplay == 1) {
        // const kUrl1 = 'https://luan.xyz/files/audio/ambient_c_motion.mp3';
        //final Uri url = Uri.parse(uri);
        audioPlayer.setReleaseMode(ReleaseMode.LOOP);
        audioPlayer.play(urlmp3);

        // audioPlayer.onPlayerCompletion.listen((event) {
        //   audioPlayer.play(urlmp3);
        //   print("chay oaudio");
        // });
        setState(() {
          stateplay = 0;
          animation = true;
        });
      } else {
        audioPlayer.stop();
        setState(() {
          stateplay = 1;
          animation = false;
        });
        // print('close adio $stateplay');
      }
    }, child: BlocBuilder<WeatherBloc, WeatherState>(
        builder: (context, stateWeather) {
      if (stateWeather is WeatherStateSuccess) {
        weather = stateWeather.autogeneratedWeather;
        Future.delayed(Duration.zero, () {
          //your code goes here
          urlmp3 = driverLink(convertRandomAudio(
              convertIdWeather(weather.current!.weather![0].id!.toInt())));
          print("tesst: " + urlmp3);
        });

        if (convertIdWeather(weather.current!.weather![0].id!.toInt()) == 800 ||
            convertIdWeather(weather.current!.weather![0].id!.toInt()) == 801) {
          if (now.hour < 18 && now.hour > 5) {
            return Lottie.asset(
              'acssets/iconAnimation/circleBlack.json',
              animate: animation,
            );
          } else {
            return Lottie.asset(
              'acssets/iconAnimation/circleWhite.json',
              animate: animation,
            );
          }
        } else {
          return Lottie.asset(
            'acssets/iconAnimation/circleWhite.json',
            animate: animation,
          );
        }
      } else {
        return Lottie.asset(
          'acssets/iconAnimation/circleWhite.json',
          animate: animation,
        );
      }
      //Lottie.asset('acssets/iconAnimation/circleWhite.json',animate: true,);
    }));
  }
}

String convertRandomAudio(int i) {
  final _random = Random();
  DateTime now = DateTime.now();
  switch (i) {
    case 200:
      return listRain[_random.nextInt(listRain.length)];
    case 211:
      return listRain[_random.nextInt(listRain.length)];
    case 300:
      return listRain[_random.nextInt(listRain.length)];
    case 500:
      return listRain[_random.nextInt(listRain.length)];
    case 511:
      return listSnow[_random.nextInt(listSnow.length)];
    case 600:
      return listSnow[_random.nextInt(listSnow.length)];
    case 700:
      return listMist[_random.nextInt(listMist.length)];
    case 800:
      if (now.hour < 18 && now.hour > 5) {
        return listSun[_random.nextInt(listSun.length)];
      } else {
        return listNight[_random.nextInt(listNight.length)];
      }
    case 801:
      return listCloud[_random.nextInt(listCloud.length)];
    case 803:
      return listCloud[_random.nextInt(listCloud.length)];
    default:
      return 'https://nhacchuong123.com/nhac-chuong/nhac-dong-vat/tieng-de-keu.mp3';
  }
}
